name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests (if you have them)
      run: npm test --if-present
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 30s
        script: |
          # Create backup of current deployment
          cp -r /www/wwwroot/ecommerce /www/wwwroot/ecommerce.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # Create deployment directory if it doesn't exist
          mkdir -p /www/wwwroot/ecommerce
          
    - name: Copy files to server
      run: |
        # Install sshpass for password authentication
        sudo apt-get update && sudo apt-get install -y sshpass
        
        # Copy built files to server using scp with password
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no -r dist/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/www/wwwroot/ecommerce/
        
    - name: Finalize deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 30s
        script: |
          # Set proper permissions for aaPanel
          chmod -R 755 /www/wwwroot/ecommerce
          chmod -R 644 /www/wwwroot/ecommerce/*
          
          # Create nginx configuration for React Router (if using client-side routing)
          cat > /www/wwwroot/ecommerce/nginx.conf << 'EOF'
          location / {
            try_files $uri $uri/ /index.html;
          }
          EOF
          
          # Create .htaccess for Apache fallback
          cat > /www/wwwroot/ecommerce/.htaccess << 'EOF'
          RewriteEngine On
          RewriteBase /
          RewriteRule ^index\.html$ - [L]
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.html [L]
          EOF
          
          # Set proper permissions
          chmod 644 /www/wwwroot/ecommerce/.htaccess
          chmod 644 /www/wwwroot/ecommerce/nginx.conf
          
          # Reload Nginx
          nginx -s reload || systemctl reload nginx || true
          
          echo "Deployment completed successfully!"
          echo "Your ecommerce app is now live at: http://130.94.40.85/ecommerce/"
