name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests (if you have them)
      run: npm test --if-present
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy using rsync
      run: |
        # Install sshpass for password authentication
        sudo apt-get update && sudo apt-get install -y sshpass
        
        # Test SSH connection first
        echo "Testing SSH connection..."
        echo "Host: ${{ secrets.SERVER_HOST }}"
        echo "User: ${{ secrets.SERVER_USER }}"
        echo "Password length: ${#SERVER_PASSWORD}"
        
        # Test with password authentication only (disable public key auth)
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 -o PreferredAuthentications=password -o PubkeyAuthentication=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"
        
        # Create deployment directory and backup using SSH
        echo "Creating backup and deployment directory..."
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 -o PreferredAuthentications=password -o PubkeyAuthentication=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          # Create backup of current deployment
          cp -r /www/wwwroot/ecommerce /www/wwwroot/ecommerce.backup.\$(date +%Y%m%d_%H%M%S) || true
          
          # Create deployment directory if it doesn't exist
          mkdir -p /www/wwwroot/ecommerce
          
          echo 'Backup and directory creation completed'
        "
        
        # Copy files using scp with password
        echo "Copying files to server..."
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 -o PreferredAuthentications=password -o PubkeyAuthentication=no -r dist/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/www/wwwroot/ecommerce/
        
        # Copy test file
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 -o PreferredAuthentications=password -o PubkeyAuthentication=no test-deployment.html ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/www/wwwroot/ecommerce/test.html
        
        # Set permissions and create config files
        echo "Setting permissions and creating config files..."
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 -o PreferredAuthentications=password -o PubkeyAuthentication=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          # Set proper permissions for aaPanel
          chmod -R 755 /www/wwwroot/ecommerce
          chmod -R 644 /www/wwwroot/ecommerce/*
          
          # Create .htaccess for Apache fallback (aaPanel might use Apache)
          cat > /www/wwwroot/ecommerce/.htaccess << 'EOF'
          RewriteEngine On
          RewriteBase /ecommerce/
          
          # Handle assets
          RewriteRule ^assets/(.*)$ assets/$1 [L]
          
          # Handle React Router
          RewriteRule ^index\.html$ - [L]
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /ecommerce/index.html [L]
          EOF
          
          # Create a simple Nginx config that should work with aaPanel
          cat > /www/wwwroot/ecommerce/nginx.conf << 'EOF'
          location /ecommerce/ {
              alias /www/wwwroot/ecommerce/;
              index index.html;
              try_files \$uri \$uri/ /ecommerce/index.html;
          }
          
          location /ecommerce/assets/ {
              alias /www/wwwroot/ecommerce/assets/;
              expires 1y;
              add_header Cache-Control \"public, immutable\";
          }
          EOF
          
          # Set proper permissions for config files
          chmod 644 /www/wwwroot/ecommerce/.htaccess
          chmod 644 /www/wwwroot/ecommerce/nginx.conf
          
          # Try to reload web server (both Nginx and Apache)
          nginx -s reload 2>/dev/null || true
          systemctl reload nginx 2>/dev/null || true
          systemctl reload apache2 2>/dev/null || true
          systemctl reload httpd 2>/dev/null || true
          
          echo 'Deployment completed successfully!'
          echo 'Your ecommerce app is now live at: http://130.94.40.85/ecommerce/'
        "
