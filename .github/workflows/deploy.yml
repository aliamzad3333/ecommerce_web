name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests (if you have them)
      run: npm test --if-present
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy using SSH key
      run: |
        # Setup SSH key authentication
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/github_actions
        chmod 600 ~/.ssh/github_actions
        
        # Add server to known hosts
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
        # Test SSH connection first
        echo "Testing SSH connection..."
        echo "Host: ${{ secrets.SERVER_HOST }}"
        echo "User: ${{ secrets.SERVER_USER }}"
        
        # Test SSH key authentication
        ssh -i ~/.ssh/github_actions -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"
        
        # Create deployment directory and backup using SSH
        echo "Creating backup and deployment directory..."
        ssh -i ~/.ssh/github_actions -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          # Create backup of current deployment
          cp -r /www/wwwroot /www/wwwroot.backup.\$(date +%Y%m%d_%H%M%S) || true
          
          # Create deployment directory if it doesn't exist
          mkdir -p /www/wwwroot
          
          echo 'Backup and directory creation completed'
        "
        
        # Copy files to server
        echo "Copying files to server..."
        scp -i ~/.ssh/github_actions -o StrictHostKeyChecking=no -o ConnectTimeout=10 -r dist/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/www/wwwroot/
        
        # Set permissions and create config files
        echo "Setting permissions and creating config files..."
        ssh -i ~/.ssh/github_actions -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          # Set proper permissions for aaPanel
          chmod -R 755 /www/wwwroot
          chmod -R 644 /www/wwwroot/*
          # Fix assets directory permissions specifically
          chmod -R 755 /www/wwwroot/assets/
          chmod -R 644 /www/wwwroot/assets/*
          
          # Ensure www-data can read the files (for Nginx/Apache)
          chown -R www-data:www-data /www/wwwroot 2>/dev/null || true
          chown -R nginx:nginx /www/wwwroot 2>/dev/null || true
          chown -R apache:apache /www/wwwroot 2>/dev/null || true
          
          # Create .htaccess for Apache fallback
          cat > /www/wwwroot/.htaccess << 'EOF'
          RewriteEngine On
          RewriteBase /
          
          # Handle assets
          RewriteRule ^assets/(.*)$ assets/$1 [L]
          
          # Handle React Router
          RewriteRule ^index\.html$ - [L]
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.html [L]
          EOF
          
          # Set proper permissions for config files
          chmod 644 /www/wwwroot/.htaccess
          
          # Remove any conflicting default server block
          rm -f /www/server/panel/vhost/nginx/0.default.conf
          
          # Create/update the ecommerce nginx configuration
          cat > /www/server/panel/vhost/nginx/ecommerce.conf << 'EOF'
          server {
              listen 80 default_server;
              server_name 130.94.40.85 _;
              root /www/wwwroot;
              index index.html index.htm;
              
              # API routes - proxy to Go backend
              location /api/ {
                  proxy_pass http://127.0.0.1:8080;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  
                  # CORS headers
                  add_header Access-Control-Allow-Origin *;
                  add_header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\";
                  add_header Access-Control-Allow-Headers \"Content-Type, Authorization\";
                  
                  # Handle preflight requests
                  if (\$request_method = 'OPTIONS') {
                      add_header Access-Control-Allow-Origin *;
                      add_header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\";
                      add_header Access-Control-Allow-Headers \"Content-Type, Authorization\";
                      add_header Access-Control-Max-Age 1728000;
                      add_header Content-Type 'text/plain; charset=utf-8';
                      add_header Content-Length 0;
                      return 204;
                  }
              }
              
              # Health check endpoint
              location /health {
                  proxy_pass http://127.0.0.1:8080/health;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              # Serve assets directory specifically
              location /assets/ {
                  expires 1y;
                  add_header Cache-Control \"public, immutable\";
                  add_header Access-Control-Allow-Origin *;
              }
              
              # Serve other static files
              location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control \"public, immutable\";
                  add_header Access-Control-Allow-Origin *;
              }
              
              # Serve the main app from root
              location / {
                  try_files \$uri \$uri/ /index.html;
              }
          }
          EOF
          
          # Create aaPanel website configuration
          echo 'Creating aaPanel website configuration...'
          
          # Create a simple Nginx configuration for the IP
          cat > /www/server/nginx/conf/130.94.40.85.conf << 'EOF'
          server {
              listen 80;
              server_name 130.94.40.85;
              root /www/wwwroot;
              index index.html index.htm;
              
              location / {
                  try_files \$uri \$uri/ /index.html;
              }
              
              location /assets/ {
                  expires 1y;
                  add_header Cache-Control \"public, immutable\";
              }
              
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                  expires 1y;
                  add_header Cache-Control \"public, immutable\";
              }
          }
          EOF
          
          # Create a simple Apache configuration for the IP
          cat > /www/server/apache/conf/extra/130.94.40.85.conf << 'EOF'
          <VirtualHost *:80>
              ServerName 130.94.40.85
              DocumentRoot /www/wwwroot
              DirectoryIndex index.html index.htm
              
              <Directory /www/wwwroot>
                  AllowOverride All
                  Require all granted
              </Directory>
          </VirtualHost>
          EOF
          
          # Test nginx configuration and reload
          nginx -t && nginx -s reload 2>/dev/null || true
          systemctl reload nginx 2>/dev/null || true
          systemctl reload apache2 2>/dev/null || true
          systemctl restart nginx 2>/dev/null || true
          systemctl restart apache2 2>/dev/null || true
          
          # List files to verify deployment
          echo 'Files in /www/wwwroot/:'
          ls -la /www/wwwroot/
          
          # Check permissions
          echo 'Permissions:'
          ls -la /www/wwwroot/index.html
          
          # Test if index.html is readable
          echo 'Testing index.html access:'
          head -5 /www/wwwroot/index.html
          
          # Check if Nginx configuration was created
          echo 'Checking Nginx configuration:'
          ls -la /www/server/nginx/conf/130.94.40.85.conf 2>/dev/null || echo 'Nginx config not found'
          
          # Check if Apache configuration was created
          echo 'Checking Apache configuration:'
          ls -la /www/server/apache/conf/extra/130.94.40.85.conf 2>/dev/null || echo 'Apache config not found'
          
          # Test web server status
          echo 'Testing web server status:'
          curl -I http://localhost/ 2>/dev/null || echo 'Local web server test failed'
          
          echo 'Deployment completed successfully!'
          echo 'Your ecommerce app is now live at: http://130.94.40.85/'
        "
